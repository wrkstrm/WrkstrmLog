@Tutorial(time: 15) {
  @Intro(title: "Logging with WrkstrmLog") {
    Learn how to configure and emit log messages with WrkstrmLog.
  }

  @Section(title: "Create a Logger") {
    Instantiate a logger with a system, category, and optional `maxExposureLevel` to opt in to additional logs.

    @ContentAndMedia {
    ```swift
    import WrkstrmLog

    let logger = Log(system: "ExampleApp", category: "Networking", maxExposureLevel: .info)
    ```
    }
  }

  @Section(title: "Control Global Exposure") {
    WrkstrmLog hides messages more verbose than `critical` by default. Raise
    the global exposure level with `Log.globalExposureLevel` to view additional details. The previous
    `Log.removeExposureLimit` API has been removed; configure the level explicitly.

    @ContentAndMedia {
    ```swift
    Log.globalExposureLevel = .debug
    ```
    }
  }

  @Section(title: "Choose Backends") {
    Select the backend(s) appropriate for your platform or environment. When multiple are supplied,
    index 0 is treated as the primary.

    @ContentAndMedia {
    ```swift
    let osLogger = Log(system: "ExampleApp", category: "Startup", backends: [OSLogBackend()])
    let printLogger = Log(system: "ExampleApp", category: "Startup", backends: [PrintLogBackend()])
    ```
    }
  }

  @Section(title: "Runtime Backend Selection") {
    Adjust the active backend kinds at runtime. When multiple are set, index 0 is treated as
    the primary.

    @ContentAndMedia {
    ```swift
    // Set an ordered list of kinds
    Log.Inject.setBackends([.os, .swift])

    // Convenience: set a single kind
    Log.Inject.setBackend(.os)

    // Append/remove kinds
    Log.Inject.appendBackend(.print)
    Log.Inject.removeBackend(.swift)

    // Clear custom selection; revert to platform default
    Log.Inject.removeAllCustomBackends()
    ```
    }
  }

  @Section(title: "Record Messages") {
    Each logger provides methods for standard log levels.

    @ContentAndMedia {
    ```swift
    logger.verbose("Request started")  // üîç
    logger.debug("Parsing response")   // üêû
    logger.info("Request progress")    // ‚ÑπÔ∏è
    logger.notice("Request finished")  // üìù
    logger.warning("Slow response")    // ‚ö†Ô∏è
    logger.error("Request failed: \(error)") // ‚ùó
    ```
    }
  }

  @Section(title: "Understand Log Levels") {
    For a deeper explanation of each level and example messages, see
    <doc:LogLevels>.
  }
}
